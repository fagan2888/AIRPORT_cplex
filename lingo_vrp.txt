MODEL:



! The Vehicle Routing Problem (VRP);



SETS:

 ! Q(I) is the amount required at city I,

   U(I) is the accumulated delivers at city I ;

  CITY/1..21/: Q, U;



 ! DIST(I,J) is the distance from city I to city J

   X(I,J) is 0-1 variable: It is 1 if some vehicle

   travels from city I to J, 0 if none;

  CXC( CITY, CITY): DIST, X;

ENDSETS



DATA:

 ! city 1 represent the common depo;

!  Q  =  0    6    3    7    7   18    4    5;

 Q=0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;

 ! distance from city I to city J is same from city

   J to city I. distance from city I to the depot is

   0, since the vehicle has to return to the depot;



  DIST =  ! To City;

0 15.0 7.28 15.56 12.04 13.04 7.62 10.77 12.65 4.47 14.14 13.04 5.0 13.89 12.53 11.4 11.31 9.22 14.42 6.32 11.66
0 0.0 10.2 2.24 3.16 5.39 7.81 5.39 8.54 10.63 2.24 2.24 10.0 2.0 3.16 5.0 4.12 6.32 5.0 9.22 3.61
0 10.2 0.0 9.85 7.07 6.4 6.4 8.54 5.39 5.39 8.54 9.0 4.47 10.0 9.06 5.39 6.08 4.0 7.81 6.4 8.06
0 2.24 9.85 0.0 3.61 4.0 8.94 7.07 7.07 11.4 1.41 4.0 10.63 4.12 5.0 4.47 4.24 6.4 3.16 10.3 5.1
0 3.16 7.07 3.61 0.0 3.61 5.39 4.12 6.4 7.81 2.24 2.24 7.07 3.16 2.83 2.24 1.0 3.16 4.12 6.71 2.24
0 5.39 6.4 4.0 3.61 0.0 8.0 7.62 3.16 9.49 3.16 5.66 8.54 6.4 6.4 2.0 3.16 4.12 1.41 9.06 5.83
0 7.81 6.4 8.94 5.39 8.0 0.0 3.16 9.49 3.16 7.62 5.66 3.0 6.4 5.0 6.0 5.1 4.12 9.06 1.41 4.24
0 5.39 8.54 7.07 4.12 7.62 3.16 0.0 10.0 6.32 6.0 3.16 6.08 3.61 2.24 5.83 4.47 5.0 8.25 4.47 2.0
0 8.54 5.39 7.07 6.4 3.16 9.49 10.0 0.0 10.0 6.32 8.6 9.0 9.43 9.22 4.24 5.66 5.39 4.0 10.2 8.49
0 10.63 5.39 11.4 7.81 9.49 3.16 6.32 10.0 0.0 10.0 8.6 1.0 9.43 8.06 7.62 7.21 5.39 10.77 2.0 7.21
0 2.24 8.54 1.41 2.24 3.16 7.62 6.0 6.32 10.0 0.0 3.16 9.22 3.61 4.12 3.16 2.83 5.0 2.83 8.94 4.0
0 2.24 9.0 4.0 2.24 5.66 5.66 3.16 8.6 8.6 3.16 0.0 8.06 1.0 1.0 4.47 3.16 5.0 5.83 7.07 1.41
0 10.0 4.47 10.63 7.07 8.54 3.0 6.08 9.0 1.0 9.22 8.06 0.0 8.94 7.62 6.71 6.4 4.47 9.85 2.24 6.71
0 2.0 10.0 4.12 3.16 6.4 6.4 3.61 9.43 9.43 3.61 1.0 8.94 0.0 1.41 5.39 4.12 6.0 6.4 7.81 2.24
0 3.16 9.06 5.0 2.83 6.4 5.0 2.24 9.22 8.06 4.12 1.0 7.62 1.41 0.0 5.0 3.61 5.1 6.71 6.4 1.0
0 5.0 5.39 4.47 2.24 2.0 6.0 5.83 4.24 7.62 3.16 4.47 6.71 5.39 5.0 0.0 1.41 2.24 3.16 7.07 4.24
0 4.12 6.08 4.24 1.0 3.16 5.1 4.47 5.66 7.21 2.83 3.16 6.4 4.12 3.61 1.41 0.0 2.24 4.0 6.32 2.83
0 6.32 4.0 6.4 3.16 4.12 4.12 5.0 5.39 5.39 5.0 5.0 4.47 6.0 5.1 2.24 2.24 0.0 5.39 5.0 4.12
0 5.0 7.81 3.16 4.12 1.41 9.06 8.25 4.0 10.77 2.83 5.83 9.85 6.4 6.71 3.16 4.0 5.39 0.0 10.2 6.32
0 9.22 6.4 10.3 6.71 9.06 1.41 4.47 10.2 2.0 8.94 7.07 2.24 7.81 6.4 7.07 6.32 5.0 10.2 0.0 5.66
0 3.61 8.06 5.1 2.24 5.83 4.24 2.0 8.49 7.21 4.0 1.41 6.71 2.24 1.0 4.24 2.83 4.12 6.32 5.66 0.0;




 ! VCAP is the capacity of a vehicle ;

  VCAP = 4;

ENDDATA



 ! Minimize total travel distance;

  MIN = @SUM( CXC: DIST * X);



 ! For each city, except depot....;

  @FOR( CITY( K)| K #GT# 1:



 ! a vehicle does not traval inside itself,...;

    X( K, K) = 0;



 ! a vehicle must enter it,... ;

    @SUM( CITY( I)| I #NE# K #AND# ( I #EQ# 1 #OR#!  i!=k and (i==0 or qi+qk <= capsity);

     Q( I) + Q( K) #LE# VCAP): X( I, K)) = 1;



 ! a vehicle must leave it after service ;

    @SUM( CITY( J)| J #NE# K #AND# ( J #EQ# 1 #OR#!  j!=k and j ==11 or qj+qk <=capsity ;

     Q( J) + Q( K) #LE# VCAP): X( K, J)) = 1;



 ! U( K) is at least amount needed at K but can'texceed capacity;

    @BND( Q( K), U( K), VCAP);



 ! If K follows I, then can bound U( K) - U( I);

    @FOR( CITY( I)| I #NE# K #AND# I #NE# 1:!  i !=k and i!=1;

     U( K) >= U( I) + Q( K) - VCAP + VCAP *

      ( X( K, I) + X( I, K)) - ( Q( K) + Q( I))

       * X( K, I);

    );



 ! If K is 1st stop, then U( K) = Q( K);

    U( K) <= VCAP - ( VCAP - Q( K)) * X( 1, K); !  uk = qk * x(1k);



 ! If K is not 1st stop...;

    U( K)>= Q( K)+ @SUM( CITY( I)|

     I #GT# 1: Q( I) * X( I, K));

  );

 !#####################################################################;

 ! Make the X's binary;

  @FOR( CXC: @BIN( X));



 ! Minimum no. vehicles required, fractional

   and rounded;

  VEHCLF = @SUM( CITY( I)| I #GT# 1: Q( I))/ VCAP;

  VEHCLR = VEHCLF + 1.999 -

   @WRAP( VEHCLF - .001, 1);



 ! Must send enough vehicles out of depot;

  @SUM( CITY( J)| J #GT# 1: X( 1, J)) >= VEHCLR;

END